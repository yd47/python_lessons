# -*- coding: utf-8 -*-
'''
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску, как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.1/30 - хост из сети 10.0.5.0/30

Если пользователь ввел адрес 10.0.1.1/24,
вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях сеть/маска.

Ограничение: Все задания надо выполнять используя только пройденные темы.

'''


subnet = input('Введи подсеть в формате x.x.x.x/mask: ')

netsub = subnet.split('/') # разделить удобнее сначала по слешу
net = netsub[0].split('.')
sub = int(netsub[1]) #это маска

n0 = 32-sub 		#эта штука нужна, чтобы добить строку нулями пока не будет 32 знака
mlen = '1'*sub+'0'*n0 #размножаем 1 до длины маски, остальное добиваем нулями

#mask
m0 = int(mlen[0:8],2) #из строки берем значения с 0 !ДО! 8го и говорим, что это в двоичном формате
m1 = int(mlen[8:16],2)
m2 = int(mlen[16:24],2)
m3 = int(mlen[24:32],2)

#ip
oct0 = int(net[0]) 
oct1 = int(net[1])
oct2 = int(net[2])
oct3 = int(net[3])

#преобразование ip адреса в адрес подсети в двоичном формате, результат - строка
sub0 = bin(oct0&m0)
sub1 = bin(oct1&m1)
sub2 = bin(oct2&m2)
sub3 = bin(oct3&m3)

#преобразование в десятичное число сделал прямо в принте, потому что могу
print(f'''
	Network:
	{int(sub0,2):<8} {int(sub1,2):<8} {int(sub2,2):<8} {int(sub3,2):<8}
	{int(sub0,2):08b} {int(sub1,2):08b} {int(sub2,2):08b} {int(sub3,2):08b}

	Mask:
	/{sub}
	{m0:<8} {m1:<8} {m2:<8} {m3:<8}
	{m0:08b} {m1:08b} {m2:08b} {m3:08b}
	''')






